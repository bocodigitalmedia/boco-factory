// Generated by CoffeeScript 1.6.3
(function() {
  var Errors, TypeFactory,
    __hasProp = {}.hasOwnProperty;

  Errors = require('./errors');

  TypeFactory = (function() {
    function TypeFactory(properties) {
      if (properties == null) {
        properties = {};
      }
      this.constructors = properties.constructors;
      this.defaultConstructor = properties.defaultConstructor;
      this.setDefaults();
    }

    TypeFactory.prototype.setDefaults = function() {
      return this.constructors != null ? this.constructors : this.constructors = {};
    };

    TypeFactory.prototype.construct = function(type, properties) {
      var Constructor, error, object;
      Constructor = this.getConstructor(type, properties);
      if (typeof Constructor !== 'function') {
        error = new Errors.ConstructorUndefined;
        error.setPayload({
          type: type
        });
        throw error;
      }
      object = new Constructor(properties);
      object = this.decorate(object);
      return object;
    };

    TypeFactory.prototype.decorate = function(object) {
      return object;
    };

    TypeFactory.prototype.getConstructor = function(type, properties) {
      var constructor;
      constructor = this.constructors[type];
      if (constructor == null) {
        constructor = this.defaultConstructor;
      }
      return constructor;
    };

    TypeFactory.prototype.register = function(constructors) {
      var constructor, name, _results;
      if (constructors == null) {
        constructors = {};
      }
      _results = [];
      for (name in constructors) {
        if (!__hasProp.call(constructors, name)) continue;
        constructor = constructors[name];
        _results.push(this.constructors[name] = constructor);
      }
      return _results;
    };

    return TypeFactory;

  })();

  module.exports = TypeFactory;

}).call(this);

/*
//@ sourceMappingURL=TypeFactory.map
*/
